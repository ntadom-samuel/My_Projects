/*NODE.JS*/
To use node.js in your terminal, download node.js, then type 'node' in your terminal and enter it. After that, it will create a REPL -- Read Event Print Loop -- in your teminal, where you would be able to write JavaScript code.
Exiting a REPL: To exit a REPL, type .exit in your present REPL. Another way to exit a REPL is by typing 'Ctrl + D'
Clearing a REPL: Use 'Ctrl + K' or '.clear'
Viewing the Global Variables in Node.js: If you hit tab in your REPL, a list of all node.js' global variables will be presented.
Underscore in node: Underscore(_) is your last result
Viewing all the Methods available to a property or object: To do this, type 'ObjectName.' in your termnal, then press tab.

Checking node.js documentattions: Type 'nodejs.org' in your browser. Go to docs, then read the documentation. The documentation tells you how each module works and how to access them.
ACCESSING MODULES in node.js: You use the require function to do this by passing the name of the module you want to access as a string in the require method's parenthesis. Then you can store the module in a variable. When ordering modules, core modules are placed highest followed by thrid-party(installed) modules, then manually created modules
RUNNING CODE FROM a JS FILE in node.js: To do this, type: 'node fileName.extension' or 'node filePath' in your terminal
JSON FILES: A json file is used to store data in a json format. 'JSON.parse(data)' is used to convert data received from JSON files to an object. 

/*NPM*/
//Package.json
The 'package.json' file of the npm is used to store the information of the dependencies and devDependencies you install with npm

//Types of packages
- There are two types on packages you can install with npm: development-dependency packages and simple dependency packages.
Simple Dependency Packages:
- They are packages that contain code that we will use with our own code. They are needed for code production.
Development Dependency Packages:
- They are packages that are rquired for the development phase of our application. They help in refining our code and making its execution easier. E.g, nodemon. It helps us reload our server anytime we modify our code.

//Types of package installs
-There are two types of installations: Global and Local installs.
--Local installs will only be available in the project folder where we downloaded them, but Global installs will be available in all folders in your computer. As a result, Global installs can be used in the command line directly, but local installs can't.
--Packages like nodemon should be installed globally because many files would need access to its functionality. 
---To use a globally installed nodemon to run a file, do this: type "nodemon filename.ext" in your terminal.
---To use a locally installed nodemon to run a file, do this create property, e.g "start", in your package.json file's script object and assign it a string value of "nodemon index.js". After that, run this command line, "npm run start(the property name you created)" or "npm start" in your terminal.

//Package versioning and updating
-Dependency packages are stored in this format: "^1.2.9". 
--THE PATCH VERSION
---'9' takes position of the patch version. It is a part of the package that stores all its bug fixes. Changing the patch version of a package does not affect the overall functionality of previous code
--THE MINOR VERSION
---'2' takes position of the minor version. It is a part of the package that stores new features for the package. Changing the minor version of a package does not affect the functionality of previous code
--THE MAJOR VERSION
---'1' takes position of the major version. It is a part of the package that stores a completely new package system. Changing it affects the overall functionality of previous code
--^
--'^' determines the the type of version updates your package will accept. For example, "*" accpets updates for all versions; "^" will accept updates for your packages minor and patch versions, but "~" will only accept updates for your packages patch version. 

-You can install a particular version of a dependency package by typing this in your terminal, "npm i packageName@version".
-You can check if any of your dependency packages are outdated by typing, "npm outdated" in your terminal after you have initialized npm.
-To update a particular version, type this in your terminal, "npm update packageName"
Note: '.prettierrc' is a configuration file